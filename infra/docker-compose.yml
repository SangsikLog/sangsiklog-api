version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root  # 초기 루트 비밀번호 설정
      MYSQL_DATABASE: sangsiklog
      MYSQL_USER: sangsiklog
      MYSQL_PASSWORD: sangsik123
    ports:
      - "3306:3306"
    volumes:
      - ./mysql-data:/var/lib/mysql
      - ./mysql-initdb:/docker-entrypoint-initdb.d

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    volumes:
      - ./kafka-data:/var/lib/kafka/data\

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    ports:
      - "8000:8080"

  redis-node-1:
    image: redis:6.2
    container_name: redis-node-1
    command: ["redis-server", "--cluster-enabled", "yes", "--cluster-config-file", "/data/nodes.conf", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - ./redis-node-1-data:/data

  redis-node-2:
    image: redis:6.2
    container_name: redis-node-2
    command: ["redis-server", "--cluster-enabled", "yes", "--cluster-config-file", "/data/nodes.conf", "--appendonly", "yes"]
    ports:
      - "6380:6379"
    volumes:
      - ./redis-node-2-data:/data

  redis-node-3:
    image: redis:6.2
    container_name: redis-node-3
    command: ["redis-server", "--cluster-enabled", "yes", "--cluster-config-file", "/data/nodes.conf", "--appendonly", "yes"]
    ports:
      - "6381:6379"
    volumes:
      - ./redis-node-3-data:/data

  redis-node-4:
    image: redis:6.2
    container_name: redis-node-4
    command: ["redis-server", "--cluster-enabled", "yes", "--cluster-config-file", "/data/nodes.conf", "--appendonly", "yes"]
    ports:
      - "6382:6379"
    volumes:
      - ./redis-node-4-data:/data

  redis-node-5:
    image: redis:6.2
    container_name: redis-node-5
    command: ["redis-server", "--cluster-enabled", "yes", "--cluster-config-file", "/data/nodes.conf", "--appendonly", "yes"]
    ports:
      - "6383:6379"
    volumes:
      - ./redis-node-5-data:/data

  redis-node-6:
    image: redis:6.2
    container_name: redis-node-6
    command: ["redis-server", "--cluster-enabled", "yes", "--cluster-config-file", "/data/nodes.conf", "--appendonly", "yes"]
    ports:
      - "6384:6379"
    volumes:
      - ./redis-node-6-data:/data

  redis-setup:
    image: redis:6.2
    container_name: redis-setup
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
      - redis-node-5
      - redis-node-6
    entrypoint: >
      sh -c "
        sleep 10 &&
        echo 'yes' | redis-cli --cluster create redis-node-1:6379 redis-node-2:6379 redis-node-3:6379 redis-node-4:6379 redis-node-5:6379 redis-node-6:6379 --cluster-replicas 1
      "

volumes:
  mysql-data:
  kafka-data:
  redis-node-1-data:
  redis-node-2-data:
  redis-node-3-data:
  redis-node-4-data:
  redis-node-5-data:
  redis-node-6-data: